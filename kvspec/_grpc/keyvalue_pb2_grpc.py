# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import keyvalue_pb2 as keyvalue__pb2


class KeyValueStoreStub(object):
    """Interface for key-value store
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PutBytes = channel.unary_unary(
                '/keyvaluestore.KeyValueStore/PutBytes',
                request_serializer=keyvalue__pb2.PutBytesRequest.SerializeToString,
                response_deserializer=keyvalue__pb2.PutBytesReply.FromString,
                )
        self.GetBytes = channel.unary_unary(
                '/keyvaluestore.KeyValueStore/GetBytes',
                request_serializer=keyvalue__pb2.GetBytesRequest.SerializeToString,
                response_deserializer=keyvalue__pb2.GetBytesReply.FromString,
                )


class KeyValueStoreServicer(object):
    """Interface for key-value store
    """

    def PutBytes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBytes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KeyValueStoreServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PutBytes': grpc.unary_unary_rpc_method_handler(
                    servicer.PutBytes,
                    request_deserializer=keyvalue__pb2.PutBytesRequest.FromString,
                    response_serializer=keyvalue__pb2.PutBytesReply.SerializeToString,
            ),
            'GetBytes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBytes,
                    request_deserializer=keyvalue__pb2.GetBytesRequest.FromString,
                    response_serializer=keyvalue__pb2.GetBytesReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'keyvaluestore.KeyValueStore', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class KeyValueStore(object):
    """Interface for key-value store
    """

    @staticmethod
    def PutBytes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/keyvaluestore.KeyValueStore/PutBytes',
            keyvalue__pb2.PutBytesRequest.SerializeToString,
            keyvalue__pb2.PutBytesReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBytes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/keyvaluestore.KeyValueStore/GetBytes',
            keyvalue__pb2.GetBytesRequest.SerializeToString,
            keyvalue__pb2.GetBytesReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
